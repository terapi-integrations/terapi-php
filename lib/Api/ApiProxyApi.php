<?php
/**
 * ApiProxyApi
 * PHP version 5
 *
 * @category Class
 * @package  Terapi\Client
 * @author   Terapi team
 * @link     https://github.com/terapi-integrations
 */

/**
 * Terapi.Web.Api-v1
 *
 * No description provided (generated by Terapi https://github.com/terapi-integrations)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/terapi-integrations.git
 * Terapi version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the Terapi code generator program.
 * https://github.com/terapi-integrations
 * Do not edit the class manually.
 */

namespace Terapi\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Terapi\Client\ApiException;
use Terapi\Client\Configuration;
use Terapi\Client\HeaderSelector;
use Terapi\Client\ObjectSerializer;

/**
 * ApiProxyApi Class Doc Comment
 *
 * @category Class
 * @package  Terapi\Client
 * @author   Terapi team
 * @link     https://github.com/terapi-integrations
 */
class ApiProxyApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiProxyEndpointDelete
     *
     * 21_997
     *
     * @param  string $endpoint endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody6 $body body (optional)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Terapi\Client\Model\CallActionResponse
     */
    public function apiProxyEndpointDelete($endpoint, $body = null)
    {
        list($response) = $this->apiProxyEndpointDeleteWithHttpInfo($endpoint, $body);
        return $response;
    }

    /**
     * Operation apiProxyEndpointDeleteWithHttpInfo
     *
     * 21_997
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody6 $body (optional)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Terapi\Client\Model\CallActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiProxyEndpointDeleteWithHttpInfo($endpoint, $body = null)
    {
        $returnType = '\Terapi\Client\Model\CallActionResponse';
        $request = $this->apiProxyEndpointDeleteRequest($endpoint, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Terapi\Client\Model\CallActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiProxyEndpointDeleteAsync
     *
     * 21_997
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody6 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyEndpointDeleteAsync($endpoint, $body = null)
    {
        return $this->apiProxyEndpointDeleteAsyncWithHttpInfo($endpoint, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiProxyEndpointDeleteAsyncWithHttpInfo
     *
     * 21_997
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody6 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyEndpointDeleteAsyncWithHttpInfo($endpoint, $body = null)
    {
        $returnType = '\Terapi\Client\Model\CallActionResponse';
        $request = $this->apiProxyEndpointDeleteRequest($endpoint, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiProxyEndpointDelete'
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody6 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiProxyEndpointDeleteRequest($endpoint, $body = null)
    {
        // verify the required parameter 'endpoint' is set
        if ($endpoint === null || (is_array($endpoint) && count($endpoint) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint when calling apiProxyEndpointDelete'
            );
        }

        $resourcePath = '/api-proxy/{endpoint}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint' . '}',
                ObjectSerializer::toPathValue($endpoint),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiProxyEndpointGet
     *
     * 21_997
     *
     * @param  string $integration_name integration_name (required)
     * @param  string $endpoint endpoint (required)
     * @param  string $x_tenant_id x_tenant_id (required)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Terapi\Client\Model\CallActionResponse
     */
    public function apiProxyEndpointGet($integration_name, $endpoint, $x_tenant_id)
    {
        list($response) = $this->apiProxyEndpointGetWithHttpInfo($integration_name, $endpoint, $x_tenant_id);
        return $response;
    }

    /**
     * Operation apiProxyEndpointGetWithHttpInfo
     *
     * 21_997
     *
     * @param  string $integration_name (required)
     * @param  string $endpoint (required)
     * @param  string $x_tenant_id (required)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Terapi\Client\Model\CallActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiProxyEndpointGetWithHttpInfo($integration_name, $endpoint, $x_tenant_id)
    {
        $returnType = '\Terapi\Client\Model\CallActionResponse';
        $request = $this->apiProxyEndpointGetRequest($integration_name, $endpoint, $x_tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Terapi\Client\Model\CallActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiProxyEndpointGetAsync
     *
     * 21_997
     *
     * @param  string $integration_name (required)
     * @param  string $endpoint (required)
     * @param  string $x_tenant_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyEndpointGetAsync($integration_name, $endpoint, $x_tenant_id)
    {
        return $this->apiProxyEndpointGetAsyncWithHttpInfo($integration_name, $endpoint, $x_tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiProxyEndpointGetAsyncWithHttpInfo
     *
     * 21_997
     *
     * @param  string $integration_name (required)
     * @param  string $endpoint (required)
     * @param  string $x_tenant_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyEndpointGetAsyncWithHttpInfo($integration_name, $endpoint, $x_tenant_id)
    {
        $returnType = '\Terapi\Client\Model\CallActionResponse';
        $request = $this->apiProxyEndpointGetRequest($integration_name, $endpoint, $x_tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiProxyEndpointGet'
     *
     * @param  string $integration_name (required)
     * @param  string $endpoint (required)
     * @param  string $x_tenant_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiProxyEndpointGetRequest($integration_name, $endpoint, $x_tenant_id)
    {
        // verify the required parameter 'integration_name' is set
        if ($integration_name === null || (is_array($integration_name) && count($integration_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integration_name when calling apiProxyEndpointGet'
            );
        }
        // verify the required parameter 'endpoint' is set
        if ($endpoint === null || (is_array($endpoint) && count($endpoint) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint when calling apiProxyEndpointGet'
            );
        }
        // verify the required parameter 'x_tenant_id' is set
        if ($x_tenant_id === null || (is_array($x_tenant_id) && count($x_tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_tenant_id when calling apiProxyEndpointGet'
            );
        }

        $resourcePath = '/api-proxy/{endpoint}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_tenant_id !== null) {
            $headerParams['X-Tenant-Id'] = ObjectSerializer::toHeaderValue($x_tenant_id);
        }

        // path params
        if ($integration_name !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationName' . '}',
                ObjectSerializer::toPathValue($integration_name),
                $resourcePath
            );
        }
        // path params
        if ($endpoint !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint' . '}',
                ObjectSerializer::toPathValue($endpoint),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiProxyEndpointPatch
     *
     * 21_997
     *
     * @param  string $endpoint endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody9 $body body (optional)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Terapi\Client\Model\CallActionResponse
     */
    public function apiProxyEndpointPatch($endpoint, $body = null)
    {
        list($response) = $this->apiProxyEndpointPatchWithHttpInfo($endpoint, $body);
        return $response;
    }

    /**
     * Operation apiProxyEndpointPatchWithHttpInfo
     *
     * 21_997
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody9 $body (optional)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Terapi\Client\Model\CallActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiProxyEndpointPatchWithHttpInfo($endpoint, $body = null)
    {
        $returnType = '\Terapi\Client\Model\CallActionResponse';
        $request = $this->apiProxyEndpointPatchRequest($endpoint, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Terapi\Client\Model\CallActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiProxyEndpointPatchAsync
     *
     * 21_997
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody9 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyEndpointPatchAsync($endpoint, $body = null)
    {
        return $this->apiProxyEndpointPatchAsyncWithHttpInfo($endpoint, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiProxyEndpointPatchAsyncWithHttpInfo
     *
     * 21_997
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody9 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyEndpointPatchAsyncWithHttpInfo($endpoint, $body = null)
    {
        $returnType = '\Terapi\Client\Model\CallActionResponse';
        $request = $this->apiProxyEndpointPatchRequest($endpoint, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiProxyEndpointPatch'
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody9 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiProxyEndpointPatchRequest($endpoint, $body = null)
    {
        // verify the required parameter 'endpoint' is set
        if ($endpoint === null || (is_array($endpoint) && count($endpoint) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint when calling apiProxyEndpointPatch'
            );
        }

        $resourcePath = '/api-proxy/{endpoint}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint' . '}',
                ObjectSerializer::toPathValue($endpoint),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiProxyEndpointPost
     *
     * 21_997
     *
     * @param  string $endpoint endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody3 $body body (optional)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Terapi\Client\Model\CallActionResponse
     */
    public function apiProxyEndpointPost($endpoint, $body = null)
    {
        list($response) = $this->apiProxyEndpointPostWithHttpInfo($endpoint, $body);
        return $response;
    }

    /**
     * Operation apiProxyEndpointPostWithHttpInfo
     *
     * 21_997
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody3 $body (optional)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Terapi\Client\Model\CallActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiProxyEndpointPostWithHttpInfo($endpoint, $body = null)
    {
        $returnType = '\Terapi\Client\Model\CallActionResponse';
        $request = $this->apiProxyEndpointPostRequest($endpoint, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Terapi\Client\Model\CallActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiProxyEndpointPostAsync
     *
     * 21_997
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody3 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyEndpointPostAsync($endpoint, $body = null)
    {
        return $this->apiProxyEndpointPostAsyncWithHttpInfo($endpoint, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiProxyEndpointPostAsyncWithHttpInfo
     *
     * 21_997
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody3 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyEndpointPostAsyncWithHttpInfo($endpoint, $body = null)
    {
        $returnType = '\Terapi\Client\Model\CallActionResponse';
        $request = $this->apiProxyEndpointPostRequest($endpoint, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiProxyEndpointPost'
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody3 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiProxyEndpointPostRequest($endpoint, $body = null)
    {
        // verify the required parameter 'endpoint' is set
        if ($endpoint === null || (is_array($endpoint) && count($endpoint) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint when calling apiProxyEndpointPost'
            );
        }

        $resourcePath = '/api-proxy/{endpoint}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint' . '}',
                ObjectSerializer::toPathValue($endpoint),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiProxyEndpointPut
     *
     * 21_997
     *
     * @param  string $endpoint endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody $body body (optional)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Terapi\Client\Model\CallActionResponse
     */
    public function apiProxyEndpointPut($endpoint, $body = null)
    {
        list($response) = $this->apiProxyEndpointPutWithHttpInfo($endpoint, $body);
        return $response;
    }

    /**
     * Operation apiProxyEndpointPutWithHttpInfo
     *
     * 21_997
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody $body (optional)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Terapi\Client\Model\CallActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiProxyEndpointPutWithHttpInfo($endpoint, $body = null)
    {
        $returnType = '\Terapi\Client\Model\CallActionResponse';
        $request = $this->apiProxyEndpointPutRequest($endpoint, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Terapi\Client\Model\CallActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiProxyEndpointPutAsync
     *
     * 21_997
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyEndpointPutAsync($endpoint, $body = null)
    {
        return $this->apiProxyEndpointPutAsyncWithHttpInfo($endpoint, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiProxyEndpointPutAsyncWithHttpInfo
     *
     * 21_997
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyEndpointPutAsyncWithHttpInfo($endpoint, $body = null)
    {
        $returnType = '\Terapi\Client\Model\CallActionResponse';
        $request = $this->apiProxyEndpointPutRequest($endpoint, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiProxyEndpointPut'
     *
     * @param  string $endpoint (required)
     * @param  \Terapi\Client\Model\ApiproxyEndpointBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiProxyEndpointPutRequest($endpoint, $body = null)
    {
        // verify the required parameter 'endpoint' is set
        if ($endpoint === null || (is_array($endpoint) && count($endpoint) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint when calling apiProxyEndpointPut'
            );
        }

        $resourcePath = '/api-proxy/{endpoint}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint' . '}',
                ObjectSerializer::toPathValue($endpoint),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiProxyOauth2ChallengeGet
     *
     * 21_999
     *
     * @param  string $tenant_id tenant_id (optional)
     * @param  string $external_id external_id (optional)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Terapi\Client\Model\OAuth2ChallengeResponse
     */
    public function apiProxyOauth2ChallengeGet($tenant_id = null, $external_id = null)
    {
        list($response) = $this->apiProxyOauth2ChallengeGetWithHttpInfo($tenant_id, $external_id);
        return $response;
    }

    /**
     * Operation apiProxyOauth2ChallengeGetWithHttpInfo
     *
     * 21_999
     *
     * @param  string $tenant_id (optional)
     * @param  string $external_id (optional)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Terapi\Client\Model\OAuth2ChallengeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiProxyOauth2ChallengeGetWithHttpInfo($tenant_id = null, $external_id = null)
    {
        $returnType = '\Terapi\Client\Model\OAuth2ChallengeResponse';
        $request = $this->apiProxyOauth2ChallengeGetRequest($tenant_id, $external_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Terapi\Client\Model\OAuth2ChallengeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiProxyOauth2ChallengeGetAsync
     *
     * 21_999
     *
     * @param  string $tenant_id (optional)
     * @param  string $external_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyOauth2ChallengeGetAsync($tenant_id = null, $external_id = null)
    {
        return $this->apiProxyOauth2ChallengeGetAsyncWithHttpInfo($tenant_id, $external_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiProxyOauth2ChallengeGetAsyncWithHttpInfo
     *
     * 21_999
     *
     * @param  string $tenant_id (optional)
     * @param  string $external_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyOauth2ChallengeGetAsyncWithHttpInfo($tenant_id = null, $external_id = null)
    {
        $returnType = '\Terapi\Client\Model\OAuth2ChallengeResponse';
        $request = $this->apiProxyOauth2ChallengeGetRequest($tenant_id, $external_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiProxyOauth2ChallengeGet'
     *
     * @param  string $tenant_id (optional)
     * @param  string $external_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiProxyOauth2ChallengeGetRequest($tenant_id = null, $external_id = null)
    {

        $resourcePath = '/api-proxy/oauth2/challenge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            $queryParams['TenantId'] = ObjectSerializer::toQueryValue($tenant_id, 'uuid');
        }
        // query params
        if ($external_id !== null) {
            $queryParams['ExternalId'] = ObjectSerializer::toQueryValue($external_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiProxyUnifiedContactsExternalIdGet
     *
     * @param  string $external_id external_id (required)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Terapi\Client\Model\UnifiedContactResponse
     */
    public function apiProxyUnifiedContactsExternalIdGet($external_id)
    {
        list($response) = $this->apiProxyUnifiedContactsExternalIdGetWithHttpInfo($external_id);
        return $response;
    }

    /**
     * Operation apiProxyUnifiedContactsExternalIdGetWithHttpInfo
     *
     * @param  string $external_id (required)
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Terapi\Client\Model\UnifiedContactResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiProxyUnifiedContactsExternalIdGetWithHttpInfo($external_id)
    {
        $returnType = '\Terapi\Client\Model\UnifiedContactResponse';
        $request = $this->apiProxyUnifiedContactsExternalIdGetRequest($external_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Terapi\Client\Model\UnifiedContactResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiProxyUnifiedContactsExternalIdGetAsync
     *
     * 
     *
     * @param  string $external_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyUnifiedContactsExternalIdGetAsync($external_id)
    {
        return $this->apiProxyUnifiedContactsExternalIdGetAsyncWithHttpInfo($external_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiProxyUnifiedContactsExternalIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $external_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyUnifiedContactsExternalIdGetAsyncWithHttpInfo($external_id)
    {
        $returnType = '\Terapi\Client\Model\UnifiedContactResponse';
        $request = $this->apiProxyUnifiedContactsExternalIdGetRequest($external_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiProxyUnifiedContactsExternalIdGet'
     *
     * @param  string $external_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiProxyUnifiedContactsExternalIdGetRequest($external_id)
    {
        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling apiProxyUnifiedContactsExternalIdGet'
            );
        }

        $resourcePath = '/api-proxy/unified/contacts/{externalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalId' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiProxyUnifiedContactsGet
     *
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Terapi\Client\Model\UnifiedContactsListResponse
     */
    public function apiProxyUnifiedContactsGet()
    {
        list($response) = $this->apiProxyUnifiedContactsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation apiProxyUnifiedContactsGetWithHttpInfo
     *
     *
     * @throws \Terapi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Terapi\Client\Model\UnifiedContactsListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiProxyUnifiedContactsGetWithHttpInfo()
    {
        $returnType = '\Terapi\Client\Model\UnifiedContactsListResponse';
        $request = $this->apiProxyUnifiedContactsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Terapi\Client\Model\UnifiedContactsListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiProxyUnifiedContactsGetAsync
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyUnifiedContactsGetAsync()
    {
        return $this->apiProxyUnifiedContactsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiProxyUnifiedContactsGetAsyncWithHttpInfo
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProxyUnifiedContactsGetAsyncWithHttpInfo()
    {
        $returnType = '\Terapi\Client\Model\UnifiedContactsListResponse';
        $request = $this->apiProxyUnifiedContactsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiProxyUnifiedContactsGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiProxyUnifiedContactsGetRequest()
    {

        $resourcePath = '/api-proxy/unified/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
