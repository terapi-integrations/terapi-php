<?php
/**
 * TenantDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Terapi\Client
 * @author   Terapi team
 * @link     https://github.com/terapi-integrations
 */

/**
 * Terapi.Web.Api-v1
 *
 * No description provided (generated by Terapi https://github.com/terapi-integrations)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/terapi-integrations.git
 * Terapi version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the Terapi code generator program.
 * https://github.com/terapi-integrations
 * Do not edit the class manually.
 */

namespace Terapi\Client\Model;

use \ArrayAccess;
use \Terapi\Client\ObjectSerializer;

/**
 * TenantDto Class Doc Comment
 *
 * @category Class
 * @package  Terapi\Client
 * @author   Terapi team
 * @link     https://github.com/terapi-integrations
 */
class TenantDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $TerapiModelName = 'TenantDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $TerapiTypes = [
        'provided_name' => 'string',
        'invited_email_address' => 'string',
        'invitation_status' => 'AllOfTenantDtoInvitationStatus',
        'application_integration' => 'AllOfTenantDtoApplicationIntegration',
        'client_secret' => 'string',
        'client_id' => 'string',
        'webhook_url' => 'string',
        'authorized_origin_url' => 'string',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $TerapiFormats = [
        'provided_name' => null,
        'invited_email_address' => null,
        'invitation_status' => null,
        'application_integration' => null,
        'client_secret' => null,
        'client_id' => null,
        'webhook_url' => null,
        'authorized_origin_url' => null,
        'id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function TerapiTypes()
    {
        return self::$TerapiTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function TerapiFormats()
    {
        return self::$TerapiFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'provided_name' => 'providedName',
        'invited_email_address' => 'invitedEmailAddress',
        'invitation_status' => 'invitationStatus',
        'application_integration' => 'applicationIntegration',
        'client_secret' => 'clientSecret',
        'client_id' => 'clientId',
        'webhook_url' => 'webhookUrl',
        'authorized_origin_url' => 'authorizedOriginUrl',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'provided_name' => 'setProvidedName',
        'invited_email_address' => 'setInvitedEmailAddress',
        'invitation_status' => 'setInvitationStatus',
        'application_integration' => 'setApplicationIntegration',
        'client_secret' => 'setClientSecret',
        'client_id' => 'setClientId',
        'webhook_url' => 'setWebhookUrl',
        'authorized_origin_url' => 'setAuthorizedOriginUrl',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'provided_name' => 'getProvidedName',
        'invited_email_address' => 'getInvitedEmailAddress',
        'invitation_status' => 'getInvitationStatus',
        'application_integration' => 'getApplicationIntegration',
        'client_secret' => 'getClientSecret',
        'client_id' => 'getClientId',
        'webhook_url' => 'getWebhookUrl',
        'authorized_origin_url' => 'getAuthorizedOriginUrl',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$TerapiModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['provided_name'] = isset($data['provided_name']) ? $data['provided_name'] : null;
        $this->container['invited_email_address'] = isset($data['invited_email_address']) ? $data['invited_email_address'] : null;
        $this->container['invitation_status'] = isset($data['invitation_status']) ? $data['invitation_status'] : null;
        $this->container['application_integration'] = isset($data['application_integration']) ? $data['application_integration'] : null;
        $this->container['client_secret'] = isset($data['client_secret']) ? $data['client_secret'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['webhook_url'] = isset($data['webhook_url']) ? $data['webhook_url'] : null;
        $this->container['authorized_origin_url'] = isset($data['authorized_origin_url']) ? $data['authorized_origin_url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets provided_name
     *
     * @return string
     */
    public function getProvidedName()
    {
        return $this->container['provided_name'];
    }

    /**
     * Sets provided_name
     *
     * @param string $provided_name provided_name
     *
     * @return $this
     */
    public function setProvidedName($provided_name)
    {
        $this->container['provided_name'] = $provided_name;

        return $this;
    }

    /**
     * Gets invited_email_address
     *
     * @return string
     */
    public function getInvitedEmailAddress()
    {
        return $this->container['invited_email_address'];
    }

    /**
     * Sets invited_email_address
     *
     * @param string $invited_email_address invited_email_address
     *
     * @return $this
     */
    public function setInvitedEmailAddress($invited_email_address)
    {
        $this->container['invited_email_address'] = $invited_email_address;

        return $this;
    }

    /**
     * Gets invitation_status
     *
     * @return AllOfTenantDtoInvitationStatus
     */
    public function getInvitationStatus()
    {
        return $this->container['invitation_status'];
    }

    /**
     * Sets invitation_status
     *
     * @param AllOfTenantDtoInvitationStatus $invitation_status 0 = Invited  1 = Accepted  2 = Declined
     *
     * @return $this
     */
    public function setInvitationStatus($invitation_status)
    {
        $this->container['invitation_status'] = $invitation_status;

        return $this;
    }

    /**
     * Gets application_integration
     *
     * @return AllOfTenantDtoApplicationIntegration
     */
    public function getApplicationIntegration()
    {
        return $this->container['application_integration'];
    }

    /**
     * Sets application_integration
     *
     * @param AllOfTenantDtoApplicationIntegration $application_integration application_integration
     *
     * @return $this
     */
    public function setApplicationIntegration($application_integration)
    {
        $this->container['application_integration'] = $application_integration;

        return $this;
    }

    /**
     * Gets client_secret
     *
     * @return string
     */
    public function getClientSecret()
    {
        return $this->container['client_secret'];
    }

    /**
     * Sets client_secret
     *
     * @param string $client_secret client_secret
     *
     * @return $this
     */
    public function setClientSecret($client_secret)
    {
        $this->container['client_secret'] = $client_secret;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets webhook_url
     *
     * @return string
     */
    public function getWebhookUrl()
    {
        return $this->container['webhook_url'];
    }

    /**
     * Sets webhook_url
     *
     * @param string $webhook_url webhook_url
     *
     * @return $this
     */
    public function setWebhookUrl($webhook_url)
    {
        $this->container['webhook_url'] = $webhook_url;

        return $this;
    }

    /**
     * Gets authorized_origin_url
     *
     * @return string
     */
    public function getAuthorizedOriginUrl()
    {
        return $this->container['authorized_origin_url'];
    }

    /**
     * Sets authorized_origin_url
     *
     * @param string $authorized_origin_url authorized_origin_url
     *
     * @return $this
     */
    public function setAuthorizedOriginUrl($authorized_origin_url)
    {
        $this->container['authorized_origin_url'] = $authorized_origin_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
